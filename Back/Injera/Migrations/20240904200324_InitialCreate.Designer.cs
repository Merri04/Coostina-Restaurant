// <auto-generated />
using System;
using Injera.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Injera.Migrations
{
    [DbContext(typeof(RestaurantContext))]
    [Migration("20240904200324_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Main Mesob Dishes"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Vegan and Vegetarian Dishes"
                        });
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Beef with black cardamom & spiced butter Mitmita served with injera.",
                            ImageUrl = "/images/kitfo.jpg",
                            Name = "Kitfo",
                            Price = 319.00m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Lean & tender cubes of beef spiced with butter 'Mitmita Spice' served with injera.",
                            ImageUrl = "/images/gored.jpg",
                            Name = "Gored Gored",
                            Price = 319.00m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "Ground chickpeas simmered in berbere sauce served with injera.",
                            ImageUrl = "/images/gored.jpg",
                            Name = "Shiro",
                            Price = 319.00m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "Fried meat with spices served with injera.",
                            ImageUrl = "/images/kibsi.jpg",
                            Name = "Tibs",
                            Price = 299.00m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "Chocolate fondant served with vanilla ice cream.",
                            ImageUrl = "/images/kitfo.jpg",
                            Name = "Sjokoladefondant",
                            Price = 135.00m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "Banana, ice cream, chocolate sauce, and raspberry coulis.",
                            ImageUrl = "/images/gored.jpg",
                            Name = "Banansplit",
                            Price = 160.00m
                        });
                });

            modelBuilder.Entity("Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialRequests")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("MenuItem", b =>
                {
                    b.HasOne("Category", "Category")
                        .WithMany("MenuItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Navigation("MenuItems");
                });
#pragma warning restore 612, 618
        }
    }
}
